/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Estadisticas_productos;

import Conexion_DB.conectar;
import static Loggin_Principal.NECTTIC.ingreso;
import Loggin_Principal.Principal;
import Loggin_Principal.Seleccion_surc_vta_stock;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.util.JRLoader;

public class control_ventas_stock_clientes extends javax.swing.JDialog {

    DefaultTableModel model;
    private static DefaultTableCellRenderer tcr;

    public control_ventas_stock_clientes(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        if (Principal.lbl_mode_dark.getText().equals("oscuro")) {
            panel_razon_pro.setBackground(new java.awt.Color(69, 84, 92));

        }
         cargarUsu();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_razon_pro = new javax.swing.JPanel();
        txt_cod_cli_stock = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_control = new javax.swing.JTable();
        lbl_nom_cli_stock = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_cant_pro = new javax.swing.JTextField();
        jd_fin = new org.jdesktop.swingx.JXDatePicker();
        jd_ini = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        ch_suma_stock = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_calc_monto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lbl_almacen_stock_vta = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel_razon_pro.setBackground(new java.awt.Color(255, 255, 255));
        panel_razon_pro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_cod_cli_stock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_cod_cli_stock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_cod_cli_stock.setDisabledTextColor(new java.awt.Color(153, 0, 0));
        txt_cod_cli_stock.setEnabled(false);
        txt_cod_cli_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cod_cli_stockActionPerformed(evt);
            }
        });
        txt_cod_cli_stock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_cod_cli_stockKeyPressed(evt);
            }
        });
        panel_razon_pro.add(txt_cod_cli_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 100, 30));

        btn_buscar.setBackground(new java.awt.Color(255, 255, 255));
        btn_buscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/graphic.png"))); // NOI18N
        btn_buscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        panel_razon_pro.add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 30, 70, 50));

        tb_control.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tb_control.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tb_control.setShowHorizontalLines(false);
        tb_control.setShowVerticalLines(false);
        tb_control.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_controlMouseClicked(evt);
            }
        });
        tb_control.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tb_controlKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tb_control);

        panel_razon_pro.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 1120, 450));

        lbl_nom_cli_stock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_nom_cli_stock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        panel_razon_pro.add(lbl_nom_cli_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 440, 30));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos_3/lupa.png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panel_razon_pro.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 50, 30));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Fecha Final:");
        panel_razon_pro.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, 80, 30));

        txt_cant_pro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_cant_pro.setText("0");
        txt_cant_pro.setDisabledTextColor(new java.awt.Color(204, 0, 0));
        txt_cant_pro.setEnabled(false);
        panel_razon_pro.add(txt_cant_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 550, 110, 30));
        panel_razon_pro.add(jd_fin, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, 140, 30));
        panel_razon_pro.add(jd_ini, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 140, 30));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Total:");
        panel_razon_pro.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 550, 40, 30));

        jPanel6.setBackground(new java.awt.Color(204, 0, 51));

        ch_suma_stock.setBackground(new java.awt.Color(204, 0, 51));
        ch_suma_stock.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_suma_stock.setForeground(new java.awt.Color(255, 255, 255));
        ch_suma_stock.setText("Suma total del producto");
        ch_suma_stock.setContentAreaFilled(false);
        jPanel6.add(ch_suma_stock);

        panel_razon_pro.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, 220, 30));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("Fecha Inicio:");
        panel_razon_pro.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 80, 30));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("Cliente:");
        panel_razon_pro.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 30));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Cantidad:");
        panel_razon_pro.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 550, 70, 30));

        txt_calc_monto.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txt_calc_monto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_calc_monto.setText("0");
        txt_calc_monto.setDisabledTextColor(new java.awt.Color(0, 102, 51));
        txt_calc_monto.setEnabled(false);
        panel_razon_pro.add(txt_calc_monto, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 550, 190, 30));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Sucursal/Almacén:");
        panel_razon_pro.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 50, -1, 30));

        lbl_almacen_stock_vta.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lbl_almacen_stock_vta.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        lbl_almacen_stock_vta.setEnabled(false);
        panel_razon_pro.add(lbl_almacen_stock_vta, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 50, 100, 30));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos_3/lupa.png"))); // NOI18N
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        panel_razon_pro.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 50, 60, 30));

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/print.png"))); // NOI18N
        jButton3.setToolTipText("Imprimir extracto de venta");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panel_razon_pro.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 30, 60, 50));

        getContentPane().add(panel_razon_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 600));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Clientes_ventas_stock pc;
        pc = new Clientes_ventas_stock(new javax.swing.JDialog(), true);
        pc.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tb_controlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_controlKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tb_controlKeyReleased

    private void tb_controlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_controlMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tb_controlMouseClicked

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        java.sql.Date date1 = new java.sql.Date(jd_ini.getDate().getTime());
        java.sql.Date date2 = new java.sql.Date(jd_fin.getDate().getTime());
        String cod = txt_cod_cli_stock.getText();
        if (lbl_almacen_stock_vta.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Seleccione un Almacén/Sucursal válido");
        } else {

            if (txt_cod_cli_stock.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Seleccione un cliente válido");
            } else {

                if (lbl_almacen_stock_vta.getText().equals("0000001")) {
                    cargarVentas(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();
                }

                if (lbl_almacen_stock_vta.getText().equals("0000002")) {

                    cargarVentas_2(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000003")) {

                    cargarVentas_3(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000004")) {

                    cargarVentas_4(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000005")) {

                    cargarVentas_5(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000006")) {

                    cargarVentas_6(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000007")) {

                    cargarVentas_7(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000008")) {

                    cargarVentas_8(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000009")) {

                    cargarVentas_9(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000010")) {

                    cargarVentas_10(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000011")) {

                    cargarVentas_11(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000012")) {

                    cargarVentas_12(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000013")) {

                    cargarVentas_13(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000014")) {

                    cargarVentas_14(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();
                }
                if (lbl_almacen_stock_vta.getText().equals("0000015")) {

                    cargarVentas_15(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000016")) {

                    cargarVentas_16(date1, date2, cod);
                    calcularcantida();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000017")) {

                    cargarVentas_17(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000018")) {

                    cargarVentas_18(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000019")) {

                    cargarVentas_19(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000020")) {

                    cargarVentas_20(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000021")) {

                    cargarVentas_21(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000022")) {

                    cargarVentas_22(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000023")) {

                    cargarVentas_23(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000024")) {

                    cargarVentas_24(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000025")) {

                    cargarVentas_25(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000026")) {

                    cargarVentas_26(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000027")) {

                    cargarVentas_27(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000028")) {

                    cargarVentas_28(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000029")) {

                    cargarVentas_29(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
                if (lbl_almacen_stock_vta.getText().equals("0000030")) {

                    cargarVentas_30(date1, date2, cod);
                    calcularcantida();
                    calcularMonto();

                }
            }
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void txt_cod_cli_stockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cod_cli_stockKeyPressed
        char Tecla = evt.getKeyChar();

        if (Tecla == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_txt_cod_cli_stockKeyPressed

    private void txt_cod_cli_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cod_cli_stockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cod_cli_stockActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (Principal.lbl_usu_almacen.getText().equals("TODOS")) {
            Seleccion_surc_vta_stock slrf;
            slrf = new Seleccion_surc_vta_stock(new javax.swing.JDialog(), true);
            slrf.setVisible(true);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        PrintService[] printService = PrintServiceLookup.lookupPrintServices(null, null);
        if (printService.length > 0)//si existen impresoras
        {
            //se elige la impresora
            PrintService impresora = (PrintService) JOptionPane.showInputDialog(null, "Seleccionar  impresora:",
                    "Imprimir ", JOptionPane.QUESTION_MESSAGE, null, printService, printService[0]);
            if (impresora != null) //Si se selecciono una impresora
            {

                Ventas_Stock_clientes ps;//
                List<Ventas_Stock_clientes> lista = new ArrayList<>(); //Creamos una lista de empleados con ArrayList para obtener cada empleado
                for (int i = 0; i < tb_control.getRowCount(); i++) { // Iterena cada fila de la tabla
                    ps = new Ventas_Stock_clientes(tb_control.getValueAt(i, 0).toString(), tb_control.getValueAt(i, 1).toString(), //Tomamos de la tabla el valor de cada columna y creamos un objeto empleado
                            tb_control.getValueAt(i, 2).toString(), tb_control.getValueAt(i, 3).toString(), tb_control.getValueAt(i, 4).toString(), tb_control.getValueAt(i, 5).toString());
                    lista.add(ps); //Agregamos el objeto empleado a la lista
                }

                try {

                    java.sql.Date fecha_ini = new java.sql.Date(jd_ini.getDate().getTime());
                    java.sql.Date fecha_fin = new java.sql.Date(jd_fin.getDate().getTime());
                    String items = txt_cant_pro.getText();
                    String valor = txt_calc_monto.getText();
                    String idcli = txt_cod_cli_stock.getText();
                    String nomcli = lbl_nom_cli_stock.getText();

                    Map parametro = new HashMap();
                    parametro.clear();
                    parametro.put("fecha_ini", fecha_ini);
                    parametro.put("fecha_fin", fecha_fin);
                    parametro.put("items", items);
                    parametro.put("valor", valor);
                    parametro.put("idcli", idcli);
                    parametro.put("nomcli", nomcli);

                    URL in = this.getClass().getResource("/Estadisticas_productos/Salida_vta_stock.jasper");
                    JasperReport reporte = (JasperReport) JRLoader.loadObject(in);
                    JasperPrint print = JasperFillManager.fillReport(reporte, parametro, new JRBeanCollectionDataSource(lista));

                    JRPrintServiceExporter jrprintServiceExporter = new JRPrintServiceExporter();
                    jrprintServiceExporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                    jrprintServiceExporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE, impresora);
                    //  jrprintServiceExporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.TRUE);
                    jrprintServiceExporter.exportReport();
                } catch (JRException ex) {
                    Logger.getLogger(Salidas_productos_cate.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        // JOptionPane.showMessageDialog(null, "En construcción");
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                control_ventas_stock_clientes dialog = new control_ventas_stock_clientes(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscar;
    private javax.swing.JCheckBox ch_suma_stock;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker jd_fin;
    private org.jdesktop.swingx.JXDatePicker jd_ini;
    public static javax.swing.JTextField lbl_almacen_stock_vta;
    public static javax.swing.JLabel lbl_nom_cli_stock;
    private javax.swing.JPanel panel_razon_pro;
    public static javax.swing.JTable tb_control;
    private javax.swing.JTextField txt_calc_monto;
    private javax.swing.JTextField txt_cant_pro;
    public static javax.swing.JTextField txt_cod_cli_stock;
    // End of variables declaration//GEN-END:variables

    void cargarVentas(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_2(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_2 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_2 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_2 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_2 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_3(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_3 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_3 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_3 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_3 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_4(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_4 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_4 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_4 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_4 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_5(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_5 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_5 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_5 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_5 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_6(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_6 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_6 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_6 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_6 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_7(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_7 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_7 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_7 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_7 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_8(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_8 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_8 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_8 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_8 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_9(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_9 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_9 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_9 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_9 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_10(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_10 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_10 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_10 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_10 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_11(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_11 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_11 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_11 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_11 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_12(Date fecha_ini, Date fecha_fin, String cod) {
        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_12 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_12 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_12 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_12 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_13(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_13 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_13 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_13 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_13 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_14(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_14 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_14 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_14 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_14 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_15(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_15 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_15 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_15 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_15 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_16(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_16 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_16 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_16 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_16 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_17(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_17 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_17 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_17 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_17 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_18(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_18 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_18 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_18 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_18 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_19(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_19 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_19 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_19 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_19 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_20(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_20 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_20 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_20 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_20 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_21(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_21 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_21 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_21 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_21 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_22(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_22 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_22 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_22 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_22 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_23(Date fecha_ini, Date fecha_fin, String cod) {
        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_23 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_23 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_23 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_23 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_24(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_24 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_24 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_24 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_24 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_25(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_25 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_25 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_25 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_25 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_26(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_26 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_26 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_26 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_26 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_27(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_27 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_27 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_27 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_27 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_28(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_28 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_28 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_28 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_28 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_29(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_29 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_29 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_29 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_29 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_30(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro,count(v.num_bol),sum(v.cant_pro),p.pro_des,sum(REPLACE(v.pre_venta,',','')) FROM ventas_detalles_30 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_30 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' group by v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(rs.getString(5));
                    Registros[5] = "00/00/0000";

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro,v.num_bol,v.cant_pro,p.pro_des,s.nom_cli_ventas,v.pre_venta,s.fecha_ventas FROM ventas_detalles_30 AS v INNER JOIN  tienda_productos AS p ON v.cod_pro=p.pro_cod inner join ventas_30 as  s on v.num_bol=s.num_bol WHERE v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' AND s.cod_cli_ventas='" + cod + "' ORDER BY v.cod_pro asc";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Descripción", "Total Ventas", "Fecha"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(6);
                    Registros[5] = new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(7));

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock_clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void calcularCantidadPro() {

        int Acumulador = 0;
        int TF = tb_control.getRowCount();
        for (int i = 0; i < TF; i++) {
            int CantidadPro = Integer.valueOf(tb_control.getValueAt(i, 3).toString().replaceAll("\\s", "").replaceAll("[^0-9]", ""));
            Acumulador = Acumulador + CantidadPro;
        }
        //</editor-fold>
        //   lblcanpro.setText(MaskaraPrecioUnitarioEnteros(String.valueOf(Acumulador)));

    }

    public void calcularcantida() {

        String impt = "0", subtotalt = "0";

        for (int i = 0; i < tb_control.getRowCount(); i++) {
            BigDecimal PulidoPrec = ingreso.TransformReales(tb_control.getValueAt(i, 2).toString().replaceAll("\\s", ""));

            impt = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(PulidoPrec.toString());
            subtotalt = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(ingreso.TransformReales(subtotalt).add(ingreso.TransformReales(impt)).toString());

            txt_cant_pro.setText(subtotalt);
        }

    }//FIN METODO

    public void calcularMonto() {

        String impt = "0", subtotalt = "0";

        for (int i = 0; i < tb_control.getRowCount(); i++) {
            BigDecimal PulidoPrec = ingreso.TransformReales(tb_control.getValueAt(i, 4).toString().replaceAll("\\s", ""));

            impt = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(PulidoPrec.toString());
            subtotalt = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(ingreso.TransformReales(subtotalt).add(ingreso.TransformReales(impt)).toString());

            txt_calc_monto.setText(subtotalt);
        }

    }//FIN METODO

    public String MaskaraPrecioUnitarioEnteros(String ValorGuaranies) {
        DecimalFormat format = new DecimalFormat("###,###.##");
        long NumeroIntacto = 0L;
        String NroFormatado = "";
        String ValorViejo = ValorGuaranies;
        String a = ValorViejo.replace(",", "");
        NumeroIntacto = Long.valueOf(a);
        NroFormatado = format.format(NumeroIntacto);
        String LuzParaMisOjos = NroFormatado;
        return LuzParaMisOjos;
    }

    void cargarUsu() {

        String user = Principal.lbl_id_user.getText();
        String mostrar = "select * from usuarios where usu_cod='" + user + "' ";

        try {
            Connection cn = conectar.getInstance().getConnection();

            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(mostrar);
            while (rs.next()) {

                lbl_almacen_stock_vta.setText(rs.getString(6));

            }
            conectar.getInstance().closeConnection(cn);

        } catch (SQLException ex) {
            Logger.getLogger(control_ventas_stock_clientes.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }
}
