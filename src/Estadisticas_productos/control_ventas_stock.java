/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Estadisticas_productos;

import Conexion_DB.conectar;
import static Loggin_Principal.NECTTIC.ingreso;
import Loggin_Principal.Principal;
import Loggin_Principal.Seleccion_surc_ajuste;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class control_ventas_stock extends javax.swing.JDialog {

    DefaultTableModel model;
    private static DefaultTableCellRenderer tcr;

    public control_ventas_stock(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        if (Principal.lbl_mode_dark.getText().equals("oscuro")) {
            panel_razon_pro.setBackground(new java.awt.Color(69, 84, 92));

        }
        ch_ventas.setSelected(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_razon_pro = new javax.swing.JPanel();
        txt_cod_pro = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btn_buscar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_control = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        lbl_des_pro = new javax.swing.JLabel();
        ch_dev = new javax.swing.JCheckBox();
        ch_ventas = new javax.swing.JCheckBox();
        ch_compras = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txt_cant_pro = new javax.swing.JTextField();
        jd_fin = new org.jdesktop.swingx.JXDatePicker();
        jd_ini = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ch_transfe = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        ch_suma_stock = new javax.swing.JCheckBox();
        lbl_almacen_stock = new javax.swing.JLabel();
        btn_buscar1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Razón del Producto");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel_razon_pro.setBackground(new java.awt.Color(255, 255, 255));
        panel_razon_pro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_cod_pro.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_cod_pro.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_cod_pro.setDisabledTextColor(new java.awt.Color(153, 0, 0));
        txt_cod_pro.setEnabled(false);
        txt_cod_pro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cod_proActionPerformed(evt);
            }
        });
        txt_cod_pro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_cod_proKeyPressed(evt);
            }
        });
        panel_razon_pro.add(txt_cod_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 100, 30));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Descripción:");
        panel_razon_pro.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 30));

        btn_buscar.setBackground(new java.awt.Color(255, 255, 255));
        btn_buscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/graphic.png"))); // NOI18N
        btn_buscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        panel_razon_pro.add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 60, 60, 40));

        tb_control.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tb_control.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tb_control.setShowHorizontalLines(false);
        tb_control.setShowVerticalLines(false);
        tb_control.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_controlMouseClicked(evt);
            }
        });
        tb_control.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tb_controlKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tb_control);

        panel_razon_pro.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 1120, 430));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("<--Historial de ajuste de stock");
        panel_razon_pro.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 560, 250, 30));

        lbl_des_pro.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_des_pro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel_razon_pro.add(lbl_des_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 640, 30));

        ch_dev.setBackground(new java.awt.Color(255, 255, 255));
        ch_dev.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_dev.setText("En Devolución.");
        ch_dev.setContentAreaFilled(false);
        ch_dev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch_devActionPerformed(evt);
            }
        });
        panel_razon_pro.add(ch_dev, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 70, 110, 30));

        ch_ventas.setBackground(new java.awt.Color(255, 255, 255));
        ch_ventas.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_ventas.setForeground(new java.awt.Color(255, 255, 255));
        ch_ventas.setText("En ventas");
        ch_ventas.setContentAreaFilled(false);
        ch_ventas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch_ventasActionPerformed(evt);
            }
        });
        panel_razon_pro.add(ch_ventas, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, 90, 30));

        ch_compras.setBackground(new java.awt.Color(255, 255, 255));
        ch_compras.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_compras.setForeground(new java.awt.Color(255, 255, 255));
        ch_compras.setText("En Compras");
        ch_compras.setContentAreaFilled(false);
        ch_compras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch_comprasActionPerformed(evt);
            }
        });
        panel_razon_pro.add(ch_compras, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 70, -1, 30));

        jPanel2.setBackground(new java.awt.Color(0, 153, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        panel_razon_pro.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, 130, 30));

        jPanel3.setBackground(new java.awt.Color(0, 102, 153));
        panel_razon_pro.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, 120, 30));

        jPanel4.setBackground(new java.awt.Color(0, 255, 255));
        panel_razon_pro.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 70, 120, 30));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos_3/lupa.png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panel_razon_pro.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 50, 30));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Fecha Final:");
        panel_razon_pro.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 80, 30));

        txt_cant_pro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_cant_pro.setText("0");
        txt_cant_pro.setDisabledTextColor(new java.awt.Color(204, 0, 0));
        txt_cant_pro.setEnabled(false);
        panel_razon_pro.add(txt_cant_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 550, 110, 30));
        panel_razon_pro.add(jd_fin, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 140, 30));
        panel_razon_pro.add(jd_ini, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 140, 30));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Cantidad:");
        panel_razon_pro.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 550, 70, 30));

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ch_transfe.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_transfe.setForeground(new java.awt.Color(255, 255, 255));
        ch_transfe.setText("Transferencias");
        ch_transfe.setOpaque(false);
        ch_transfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch_transfeActionPerformed(evt);
            }
        });
        jPanel5.add(ch_transfe, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 30));

        panel_razon_pro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 70, 130, 30));

        jPanel6.setBackground(new java.awt.Color(204, 0, 51));

        ch_suma_stock.setBackground(new java.awt.Color(204, 0, 51));
        ch_suma_stock.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_suma_stock.setForeground(new java.awt.Color(255, 255, 255));
        ch_suma_stock.setText("Suma total del producto");
        ch_suma_stock.setContentAreaFilled(false);
        jPanel6.add(ch_suma_stock);

        panel_razon_pro.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 550, 220, 30));

        lbl_almacen_stock.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_almacen_stock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Caja_2/iconos/dpto.png"))); // NOI18N
        lbl_almacen_stock.setText("0000000");
        lbl_almacen_stock.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_almacen_stock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lbl_almacen_stock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_almacen_stockMouseClicked(evt);
            }
        });
        panel_razon_pro.add(lbl_almacen_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 10, 110, 50));

        btn_buscar1.setBackground(new java.awt.Color(255, 255, 255));
        btn_buscar1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_buscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/paquete.png"))); // NOI18N
        btn_buscar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_buscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscar1ActionPerformed(evt);
            }
        });
        panel_razon_pro.add(btn_buscar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 60, 40));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("Fecha Inicio:");
        panel_razon_pro.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 80, 30));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("Id Producto:");
        panel_razon_pro.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 30));

        getContentPane().add(panel_razon_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 600));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        java.sql.Date date1 = new java.sql.Date(jd_ini.getDate().getTime());
        java.sql.Date date2 = new java.sql.Date(jd_fin.getDate().getTime());
        String cod = txt_cod_pro.getText();
        if (lbl_almacen_stock.getText().equals("0000000")) {
            JOptionPane.showMessageDialog(null, "Seleccione un Almacén/Sucursal válido");
        } else {

            if (lbl_almacen_stock.getText().equals("0000001")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }

            if (lbl_almacen_stock.getText().equals("0000002")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_2(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol_2(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000003")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_3(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000004")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_4(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000005")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_5(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000006")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_6(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000007")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_7(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000008")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_8(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000009")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_9(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000010")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_10(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000011")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_11(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000012")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_12(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000013")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_13(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000014")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_14(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000015")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_15(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000016")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_16(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000017")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_17(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000018")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_18(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000019")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_19(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000020")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_20(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000021")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_21(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000022")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_22(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000023")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_23(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000024")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_24(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000025")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_25(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000026")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_26(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000027")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_27(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000028")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_28(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000029")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_29(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
            if (lbl_almacen_stock.getText().equals("0000030")) {
                if (ch_ventas.isSelected()) {
                    cargarVentas_30(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_compras.isSelected()) {
                    cargarCompras(date1, date2, cod);
                    calcularcantida();

                }
                if (ch_dev.isSelected()) {
                    cargarDevol(date1, date2, cod);
                    calcularcantida();

                }

                if (ch_transfe.isSelected()) {
                    cargarTrans(date1, date2, cod);
                    calcularcantida();

                }
            }
        }

    }//GEN-LAST:event_btn_buscarActionPerformed

    private void tb_controlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_controlMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tb_controlMouseClicked

    private void tb_controlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_controlKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tb_controlKeyReleased

    private void txt_cod_proKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cod_proKeyPressed
        char Tecla = evt.getKeyChar();

        if (Tecla == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_txt_cod_proKeyPressed

    private void ch_comprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch_comprasActionPerformed
        ch_ventas.setSelected(false);
        ch_compras.setSelected(true);
        ch_dev.setSelected(false);
        ch_transfe.setSelected(false);
    }//GEN-LAST:event_ch_comprasActionPerformed

    private void ch_devActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch_devActionPerformed
        ch_ventas.setSelected(false);
        ch_compras.setSelected(false);
        ch_transfe.setSelected(false);
        ch_dev.setSelected(true);
    }//GEN-LAST:event_ch_devActionPerformed

    private void txt_cod_proActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cod_proActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cod_proActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Productos_control pc;
        pc = new Productos_control(new javax.swing.JDialog(), true);
        pc.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ch_ventasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch_ventasActionPerformed
        ch_ventas.setSelected(true);
        ch_compras.setSelected(false);
        ch_transfe.setSelected(false);
        ch_dev.setSelected(false);
    }//GEN-LAST:event_ch_ventasActionPerformed

    private void lbl_almacen_stockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_almacen_stockMouseClicked

        Seleccion_surc_ajuste slrf;
        slrf = new Seleccion_surc_ajuste(new javax.swing.JDialog(), true);
        slrf.setVisible(true);


    }//GEN-LAST:event_lbl_almacen_stockMouseClicked

    private void btn_buscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscar1ActionPerformed
        Control_log_ajustes log;
        log = new Control_log_ajustes(new javax.swing.JDialog(), true);
        log.setVisible(true);
    }//GEN-LAST:event_btn_buscar1ActionPerformed

    private void ch_transfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch_transfeActionPerformed
        ch_ventas.setSelected(false);
        ch_compras.setSelected(false);
        ch_transfe.setSelected(true);
        ch_dev.setSelected(false);
    }//GEN-LAST:event_ch_transfeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(control_ventas_stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                control_ventas_stock dialog = new control_ventas_stock(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_buscar1;
    private javax.swing.JCheckBox ch_compras;
    private javax.swing.JCheckBox ch_dev;
    private javax.swing.JCheckBox ch_suma_stock;
    private javax.swing.JCheckBox ch_transfe;
    private javax.swing.JCheckBox ch_ventas;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker jd_fin;
    private org.jdesktop.swingx.JXDatePicker jd_ini;
    public static javax.swing.JLabel lbl_almacen_stock;
    public static javax.swing.JLabel lbl_des_pro;
    private javax.swing.JPanel panel_razon_pro;
    public static javax.swing.JTable tb_control;
    private javax.swing.JTextField txt_cant_pro;
    public static javax.swing.JTextField txt_cod_pro;
    // End of variables declaration//GEN-END:variables

    void cargarVentas(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_2(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_2 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_2 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_3(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_3 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_3 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_4(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_4 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_4 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_5(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_5 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_5 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_6(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_6 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_6 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_7(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_7 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_7 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_8(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_8 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_8 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_9(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_9 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_9 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_10(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_10 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_10 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_11(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_11 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_11 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_12(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_12 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_12 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_13(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_13 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_13 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_14(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_14 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_14 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_15(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_15 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_15 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_16(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_16 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_16 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_17(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_17 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_17 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_18(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_18 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_18 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_19(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_19 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_19 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_20(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_20 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_20 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_21(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_21 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_21 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_22(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_22 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_22 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_23(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_23 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_23 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_24(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_24 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_24 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_25(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_25 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_25 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_26(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_26 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_26 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_27(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_27 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_27 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_28(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_28 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_28 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_29(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_29 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_29 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarVentas_30(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT v.cod_pro, v.num_bol, sum(v.cant_pro), v.pre_unit, v.data FROM ventas_detalles_30 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT v.cod_pro, v.num_bol, v.cant_pro, v.pre_unit, v.data FROM ventas_detalles_30 AS v WHERE v.cod_pro ='" + cod + "' AND v.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY v.cod_pro asc ";

            String[] titulos = {"Id Producto", "N° Ventas", "Cantidad", "Precio Ventas", "Fecha Emisión"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarCompras(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT c.cod_pro, c.cod_comp, sum(c.cant_pro), c.pre_unit, c.data FROM compras_detalles AS c WHERE c.cod_pro ='" + cod + "' AND c.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' order by c.cod_pro  ";
            String[] titulos = {"Id Producto", "N° Compras", "Cantidad", "Precio Compras", "Fecha Entrada"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT c.cod_pro, c.cod_comp, c.cant_pro, c.pre_unit, c.data FROM compras_detalles AS c WHERE c.cod_pro ='" + cod + "' AND c.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY c.cod_pro ASC";
            String[] titulos = {"Id Producto", "N° Compras", "Cantidad", "Precio Compras", "Fecha Entrada"};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);

                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarDevol(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT d.cod_pro, d.cod_dev, sum(d.cant_pro), d.pre_unit, d.data FROM devoluciones_detalles AS d WHERE d.cod_pro ='" + cod + "' AND d.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "'  order BY d.cod_pro ";
            String[] titulos = {"Id Producto", "N° Dev.", "Cantidad", "Precio Dev.", "Fecha Dev."};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);
                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT d.cod_pro, d.cod_dev, d.cant_pro, d.pre_unit, d.data FROM devoluciones_detalles AS d WHERE d.cod_pro ='" + cod + "' AND d.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY d.cod_pro ASC";
            String[] titulos = {"Id Producto", "N° Dev.", "Cantidad", "Precio Dev.", "Fecha Dev."};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);
                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarDevol_2(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT d.cod_pro, d.cod_dev, sum(d.cant_pro), d.pre_unit, d.data FROM devoluciones_detalles_surc_2 AS d WHERE d.cod_pro ='" + cod + "' AND d.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "'  order BY d.cod_pro ";
            String[] titulos = {"Id Producto", "N° Dev.", "Cantidad", "Precio Dev.", "Fecha Dev."};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);
                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT d.cod_pro, d.cod_dev, d.cant_pro, d.pre_unit, d.data FROM devoluciones_detalles_surc_2 AS d WHERE d.cod_pro ='" + cod + "' AND d.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY d.cod_pro ASC";
            String[] titulos = {"Id Producto", "N° Dev.", "Cantidad", "Precio Dev.", "Fecha Dev."};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);
                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void cargarTrans(Date fecha_ini, Date fecha_fin, String cod) {

        if (ch_suma_stock.isSelected()) {
            String mostrar = "SELECT d.cod_pro, d.num_transf, sum(d.cant_pro), d.pre_unit, d.data FROM transf_detalles AS d WHERE d.cod_pro ='" + cod + "' AND d.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "'  order by d.cod_pro";
            String[] titulos = {"Id Producto", "N° Transferencia.", "Cantidad", "Precio", "Fecha Salida."};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);
                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String mostrar = "SELECT d.cod_pro, d.num_transf, d.cant_pro, d.pre_unit, d.data FROM transf_detalles AS d WHERE d.cod_pro ='" + cod + "' AND d.data BETWEEN '" + fecha_ini + "' AND '" + fecha_fin + "' ORDER BY d.cod_pro ASC";
            String[] titulos = {"Id Producto", "N° Transferencia.", "Cantidad", "Precio", "Fecha Salida."};
            String[] Registros = new String[13];
            model = new DefaultTableModel(null, titulos);

            try {
                Connection cn = conectar.getInstance().getConnection();

                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(mostrar);
                while (rs.next()) {
                    Registros[0] = rs.getString(1);
                    Registros[1] = rs.getString(2);
                    Registros[2] = rs.getString(3);
                    Registros[3] = rs.getString(4);
                    Registros[4] = rs.getString(5);
                    model.addRow(Registros);
                }
                tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);
                tb_control.setModel(model);
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(control_ventas_stock.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void calcularCantidadPro() {

        int Acumulador = 0;
        int TF = tb_control.getRowCount();
        for (int i = 0; i < TF; i++) {
            int CantidadPro = Integer.valueOf(tb_control.getValueAt(i, 3).toString().replaceAll("\\s", "").replaceAll("[^0-9]", ""));
            Acumulador = Acumulador + CantidadPro;
        }
        //</editor-fold>
        //   lblcanpro.setText(MaskaraPrecioUnitarioEnteros(String.valueOf(Acumulador)));

    }

    public String MaskaraPrecioUnitarioEnteros(String ValorGuaranies) {
        DecimalFormat format = new DecimalFormat("###,###.##");
        long NumeroIntacto = 0L;
        String NroFormatado = "";
        String ValorViejo = ValorGuaranies;
        String a = ValorViejo.replace(",", "");
        NumeroIntacto = Long.valueOf(a);
        NroFormatado = format.format(NumeroIntacto);
        String LuzParaMisOjos = NroFormatado;
        return LuzParaMisOjos;
    }

    public void calcularcantida() {

        String impt = "0", subtotalt = "0";

        for (int i = 0; i < tb_control.getRowCount(); i++) {
            BigDecimal PulidoPrec = ingreso.TransformReales(tb_control.getValueAt(i, 2).toString().replaceAll("\\s", ""));

            impt = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(PulidoPrec.toString());
            subtotalt = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(ingreso.TransformReales(subtotalt).add(ingreso.TransformReales(impt)).toString());

            txt_cant_pro.setText(subtotalt);
        }

    }//FIN METODO
}
