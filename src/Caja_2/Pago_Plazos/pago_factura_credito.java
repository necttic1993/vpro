/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Caja_2.Pago_Plazos;

import Caja_2.Caja_caja;
import static Caja_2.Caja_caja.lbl_total_gs;
import static Caja_2.Caja_caja.txt_des_caja;
import static Caja_2.Caja_caja.txt_nro_docu;
import Clases.Clase_Literal;
import Conexion_DB.conectar;
import static Loggin_Principal.NECTTIC.ingreso;
import Loggin_Principal.Principal;
import static Loggin_Principal.Principal.lbl_fecha_hoy;
import static Loggin_Principal.Principal.lbl_fecha_principal;
import static Loggin_Principal.Principal.lbl_mone_def;
import static Loggin_Principal.Principal.lbl_periodo_fiscal;
import static Loggin_Principal.Principal.lbl_usu_nom;
import Ventas.forma_pago.Modulo_recibo_factura;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.util.JRLoader;

public class pago_factura_credito extends javax.swing.JDialog {

    DefaultTableModel model;
    DefaultTableModel model_deta;
    DefaultTableModel model_fact;
    public static String cod_cliente = "";

    public pago_factura_credito(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        txt_monto_pago.setEnabled(false);
        panel_config.setVisible(false);

        txt_periodo_fiscal.setText(lbl_periodo_fiscal.getText());
        txt_almacen.setText(Caja_caja.txt_alma_caja.getText());
        txt_total_saldo.setDisabledTextColor(Color.red);
        tb_detalles.getColumnModel().getColumn(0).setPreferredWidth(130);
        tb_detalles.getColumnModel().getColumn(1).setPreferredWidth(80);
        tb_detalles.getColumnModel().getColumn(2).setPreferredWidth(80);
        tb_detalles.getColumnModel().getColumn(3).setPreferredWidth(80);
        tb_detalles.getColumnModel().getColumn(4).setPreferredWidth(80);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        txt_nom_cli_cred = new javax.swing.JTextField();
        lbl_serie_pago = new javax.swing.JLabel();
        id_cliente_cre = new javax.swing.JTextField();
        txt_monto_pago = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_almacen = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        panel_config = new javax.swing.JPanel();
        lbl_literal = new javax.swing.JLabel();
        txt_monto_total = new javax.swing.JTextField();
        txt_nro_fact = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btncalcular = new javax.swing.JButton();
        lbl_literal_pro = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        chk_contado = new javax.swing.JCheckBox();
        chk_plazo = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        chk_efectivo = new javax.swing.JCheckBox();
        chk_cheque = new javax.swing.JCheckBox();
        lbl_import_total = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbl_total_efect = new javax.swing.JLabel();
        lbl_total_cheque = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_detalles = new javax.swing.JTable();
        btn_cheques = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        txt_venta_cre_saldo = new javax.swing.JLabel();
        txt_periodo_fiscal = new javax.swing.JTextField();
        txt_monto_credito = new javax.swing.JLabel();
        txt_nro_recibo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_facturas = new javax.swing.JTable();
        btn_agreagr_factura = new javax.swing.JButton();
        btn_busar = new javax.swing.JButton();
        txt_total_saldo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_lote_recibos_fact = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_nota_cred = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txt_cred_entrada_caja = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel2.setText("Facturas a Pagar:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 140, 30));

        jSeparator2.setBackground(new java.awt.Color(255, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(153, 0, 0));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 40, 430, 10));

        txt_nom_cli_cred.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_nom_cli_cred.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txt_nom_cli_cred.setEnabled(false);
        jPanel2.add(txt_nom_cli_cred, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 340, 32));

        lbl_serie_pago.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbl_serie_pago.setForeground(new java.awt.Color(153, 0, 0));
        lbl_serie_pago.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel2.add(lbl_serie_pago, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 450, 250, 30));

        id_cliente_cre.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        id_cliente_cre.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        id_cliente_cre.setEnabled(false);
        jPanel2.add(id_cliente_cre, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 100, 32));

        txt_monto_pago.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_monto_pago.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_monto_pago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_monto_pagoActionPerformed(evt);
            }
        });
        txt_monto_pago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_monto_pagoKeyReleased(evt);
            }
        });
        jPanel2.add(txt_monto_pago, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 50, 160, 32));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel6.setText("Lote Factura:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 90, 30));

        txt_almacen.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_almacen.setDisabledTextColor(new java.awt.Color(0, 102, 0));
        txt_almacen.setEnabled(false);
        jPanel2.add(txt_almacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, 110, 30));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel9.setText("Recibo NÂ°:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 480, 70, 30));

        panel_config.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_literal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_literal.setText("gs");
        panel_config.add(lbl_literal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 20, 20));

        txt_monto_total.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txt_monto_total.setText("0");
        txt_monto_total.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txt_monto_total.setEnabled(false);
        panel_config.add(txt_monto_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 20));

        txt_nro_fact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txt_nro_fact.setText("0");
        txt_nro_fact.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txt_nro_fact.setEnabled(false);
        panel_config.add(txt_nro_fact, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 40, 20));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("m");
        panel_config.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 20, 20));

        btncalcular.setBackground(new java.awt.Color(255, 255, 255));
        btncalcular.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btncalcular.setMnemonic('c');
        btncalcular.setToolTipText("Calcular ALT+C");
        btncalcular.setBorder(new javax.swing.border.MatteBorder(null));
        btncalcular.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btncalcular.setFocusable(false);
        btncalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalcularActionPerformed(evt);
            }
        });
        panel_config.add(btncalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 30, 20));

        lbl_literal_pro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_literal_pro.setText("Son:");
        panel_config.add(lbl_literal_pro, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 40, -1));

        jPanel2.add(panel_config, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 510, -1, 10));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel4.setText("Surcusal:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 70, 30));

        chk_contado.setBackground(new java.awt.Color(255, 255, 255));
        chk_contado.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        chk_contado.setText("Pago a cuenta");
        chk_contado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_contadoActionPerformed(evt);
            }
        });
        jPanel2.add(chk_contado, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 110, 30));

        chk_plazo.setBackground(new java.awt.Color(255, 255, 255));
        chk_plazo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        chk_plazo.setText("CancelaciÃ³n");
        chk_plazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_plazoActionPerformed(evt);
            }
        });
        jPanel2.add(chk_plazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, 100, 30));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel12.setText("En concepto:");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 110, 30));

        chk_efectivo.setBackground(new java.awt.Color(255, 255, 255));
        chk_efectivo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        chk_efectivo.setText("Efectivo");
        chk_efectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_efectivoActionPerformed(evt);
            }
        });
        jPanel2.add(chk_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, 80, 30));

        chk_cheque.setBackground(new java.awt.Color(255, 255, 255));
        chk_cheque.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        chk_cheque.setText("Cheque");
        chk_cheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_chequeActionPerformed(evt);
            }
        });
        jPanel2.add(chk_cheque, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 100, 100, 30));

        lbl_import_total.setBackground(new java.awt.Color(153, 0, 51));
        lbl_import_total.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbl_import_total.setForeground(new java.awt.Color(204, 0, 51));
        lbl_import_total.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_import_total.setText("0");
        jPanel2.add(lbl_import_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 560, 140, 30));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel14.setText("Monto a pagar:");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 50, 90, 30));

        lbl_total_efect.setBackground(new java.awt.Color(153, 0, 51));
        lbl_total_efect.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        lbl_total_efect.setForeground(new java.awt.Color(204, 0, 51));
        lbl_total_efect.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_total_efect.setText("0");
        jPanel2.add(lbl_total_efect, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 460, 140, 30));

        lbl_total_cheque.setBackground(new java.awt.Color(153, 0, 51));
        lbl_total_cheque.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        lbl_total_cheque.setForeground(new java.awt.Color(204, 0, 51));
        lbl_total_cheque.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_total_cheque.setText("0");
        jPanel2.add(lbl_total_cheque, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 490, 140, 30));

        tb_detalles.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tb_detalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Banco", "NÃºmero", "Fecha", "Importe", "Id Banco"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_detalles.setGridColor(new java.awt.Color(255, 255, 255));
        tb_detalles.setRowHeight(22);
        tb_detalles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_detallesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_detalles);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 140, 430, 120));

        btn_cheques.setBackground(new java.awt.Color(255, 255, 255));
        btn_cheques.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_cheques.setForeground(new java.awt.Color(255, 255, 255));
        btn_cheques.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/agrega.png"))); // NOI18N
        btn_cheques.setBorderPainted(false);
        btn_cheques.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_cheques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_chequesActionPerformed(evt);
            }
        });
        jPanel2.add(btn_cheques, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 100, 50, 40));

        jLabel17.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel17.setText("Importe Total:");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 560, 90, 30));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel18.setText("Total NC:");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 520, 120, 30));

        jLabel16.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel16.setText("Total efectivo:");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 460, 110, 30));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/agrega.png"))); // NOI18N
        jButton2.setText("Grabar");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 540, 120, 50));

        txt_venta_cre_saldo.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txt_venta_cre_saldo.setForeground(new java.awt.Color(204, 0, 51));
        txt_venta_cre_saldo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txt_venta_cre_saldo.setText("0");
        jPanel2.add(txt_venta_cre_saldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 420, 160, 30));

        txt_periodo_fiscal.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_periodo_fiscal.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txt_periodo_fiscal.setEnabled(false);
        jPanel2.add(txt_periodo_fiscal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 410, 110, 30));

        txt_monto_credito.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txt_monto_credito.setForeground(new java.awt.Color(204, 0, 51));
        txt_monto_credito.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        txt_monto_credito.setText("0");
        jPanel2.add(txt_monto_credito, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 520, 140, 30));

        txt_nro_recibo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txt_nro_recibo.setText("0");
        txt_nro_recibo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_nro_reciboKeyReleased(evt);
            }
        });
        jPanel2.add(txt_nro_recibo, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 480, 120, 30));

        jLabel3.setBackground(new java.awt.Color(153, 0, 0));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Paga en:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 10, 100, 30));

        tb_facturas.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tb_facturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro Factura", "Fecha", "Importe", "Saldo", "Nro Venta", "Lote"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_facturas.setGridColor(new java.awt.Color(255, 255, 255));
        tb_facturas.setRowHeight(22);
        tb_facturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_facturasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb_facturas);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 570, 210));

        btn_agreagr_factura.setBackground(new java.awt.Color(255, 255, 255));
        btn_agreagr_factura.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_agreagr_factura.setForeground(new java.awt.Color(255, 255, 255));
        btn_agreagr_factura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/agrega.png"))); // NOI18N
        btn_agreagr_factura.setBorderPainted(false);
        btn_agreagr_factura.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_agreagr_factura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agreagr_facturaActionPerformed(evt);
            }
        });
        jPanel2.add(btn_agreagr_factura, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 120, 50, 40));

        btn_busar.setBackground(new java.awt.Color(255, 255, 255));
        btn_busar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btn_busar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Caja_2/iconos/filtros.png"))); // NOI18N
        btn_busar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_busar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_busarActionPerformed(evt);
            }
        });
        jPanel2.add(btn_busar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 50, 32));

        txt_total_saldo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_total_saldo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_total_saldo.setText("0");
        txt_total_saldo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txt_total_saldo.setEnabled(false);
        txt_total_saldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_total_saldoActionPerformed(evt);
            }
        });
        jPanel2.add(txt_total_saldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 380, 160, 32));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel8.setText("Seleccionar Nota de CrÃ©dito");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 280, 210, 30));

        jSeparator3.setBackground(new java.awt.Color(0, 153, 51));
        jSeparator3.setForeground(new java.awt.Color(0, 102, 153));
        jPanel2.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 550, 250, 10));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 51));
        jLabel10.setText("*");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 486, 10, -1));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel13.setText("PerÃ­odo:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 70, 30));

        txt_lote_recibos_fact.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_lote_recibos_fact.setDisabledTextColor(new java.awt.Color(153, 0, 0));
        txt_lote_recibos_fact.setEnabled(false);
        jPanel2.add(txt_lote_recibos_fact, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 50, 30));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel15.setText("Cliente:");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 30));

        jSeparator4.setForeground(new java.awt.Color(0, 102, 153));
        jPanel2.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 570, 10));

        jSeparator5.setForeground(new java.awt.Color(0, 102, 153));
        jPanel2.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, 430, 10));

        tb_nota_cred.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nro NC", "Monto", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_nota_cred.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_nota_credMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tb_nota_cred);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 320, 430, 120));

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon_4/agrega.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 280, 50, 40));

        jLabel19.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel19.setText("Total Cheque:");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 490, 110, 30));

        jLabel20.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel20.setText("Serie NÂ°:");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 450, 70, 30));

        jSeparator6.setForeground(new java.awt.Color(0, 102, 153));
        jPanel2.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 90, 430, 10));

        jLabel21.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(204, 0, 51));
        jLabel21.setText("Diferencia >>>");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 420, 100, 30));

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(204, 0, 51));
        jLabel22.setText("Entrada en caja >>>");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 560, 120, 30));

        txt_cred_entrada_caja.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txt_cred_entrada_caja.setText("0");
        txt_cred_entrada_caja.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txt_cred_entrada_caja.setEnabled(false);
        jPanel2.add(txt_cred_entrada_caja, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 560, 170, 30));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jLabel11.setText("Total a pagar: ");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 380, 100, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (lbl_import_total.getText().equals("0") || txt_nro_recibo.getText().equals("0") || txt_nro_recibo.getText() == null) {
            JOptionPane.showMessageDialog(this, "El nro de recibo o el monto no fueron agregados");

        } else {

            pago_credito();

            limpiar();
            this.dispose();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_monto_pagoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_monto_pagoKeyReleased
        ActivatedYourLife_efect(txt_monto_pago, evt);
        String efectivo = txt_monto_pago.getText();
        lbl_total_efect.setText(efectivo);
        if (efectivo.equals("")) {
            lbl_total_efect.setText("0");
        }
        btncalcular.doClick();
    }//GEN-LAST:event_txt_monto_pagoKeyReleased

    private void chk_contadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_contadoActionPerformed
        chk_plazo.setSelected(false);
        chk_pago = "X";
        chk_can = "";
    }//GEN-LAST:event_chk_contadoActionPerformed

    private void chk_plazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_plazoActionPerformed
        chk_contado.setSelected(false);
        chk_can = "X";
        chk_pago = "";
    }//GEN-LAST:event_chk_plazoActionPerformed

    private void chk_efectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_efectivoActionPerformed
        chk_cheque.setSelected(false);
        txt_monto_pago.setEnabled(true);
        btn_cheques.setEnabled(false);
        chk_efec = "X";
        chk_cheq = "";
    }//GEN-LAST:event_chk_efectivoActionPerformed

    private void chk_chequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_chequeActionPerformed
        chk_efectivo.setSelected(false);
        txt_monto_pago.setEnabled(false);
        btn_cheques.setEnabled(true);
        txt_monto_pago.setText("0");
        chk_cheq = "X";
        chk_efec = "";
// TODO add your handling code here:
    }//GEN-LAST:event_chk_chequeActionPerformed

    private void txt_monto_pagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_monto_pagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_monto_pagoActionPerformed

    private void tb_detallesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_detallesMouseClicked

        if (JOptionPane.showConfirmDialog(rootPane, "Excluir, Â¿desea continuar?",
                "Items", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) tb_detalles.getModel();
            int fila = tb_detalles.getSelectedRow();
            if (fila >= 0) {
                model.removeRow(fila);

                if (fila == 0) {

                    lbl_total_cheque.setText("0");
                }
                btncalcular.doClick();
            }

        }
    }//GEN-LAST:event_tb_detallesMouseClicked

    private void btncalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalcularActionPerformed

        calcularCheque();
        calcularfacturas();
        calcularCreditos();
        calcular_total_tipo();
        calcular_diferencia();
        calcular_entrada_caja();
        literal();
    }//GEN-LAST:event_btncalcularActionPerformed

    private void btn_chequesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_chequesActionPerformed
        Modulo_recibo_factura mrf;
        mrf = new Modulo_recibo_factura(new javax.swing.JDialog(), true);
        mrf.setVisible(true);
    }//GEN-LAST:event_btn_chequesActionPerformed

    private void tb_facturasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_facturasMouseClicked

        if (JOptionPane.showConfirmDialog(rootPane, "Excluir, Â¿desea continuar?",
                "Items", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) tb_facturas.getModel();
            int fila = tb_facturas.getSelectedRow();
            if (fila >= 0) {
                model.removeRow(fila);

                if (fila == 0) {

                    txt_total_saldo.setText("0");
                }
                btncalcular.doClick();
            }

        }
    }//GEN-LAST:event_tb_facturasMouseClicked

    private void btn_agreagr_facturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agreagr_facturaActionPerformed

        cod_cliente = id_cliente_cre.getText();
        Agregar_factura_recibo af;
        af = new Agregar_factura_recibo(new javax.swing.JDialog(), true);
        af.setVisible(true);
    }//GEN-LAST:event_btn_agreagr_facturaActionPerformed

    private void btn_busarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_busarActionPerformed

        Clientes_buscar_factura cf;
        cf = new Clientes_buscar_factura(new javax.swing.JDialog(), true);
        cf.setVisible(true);
    }//GEN-LAST:event_btn_busarActionPerformed

    private void txt_total_saldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_total_saldoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_total_saldoActionPerformed

    private void txt_nro_reciboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nro_reciboKeyReleased
        genera();
    }//GEN-LAST:event_txt_nro_reciboKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cod_cliente = id_cliente_cre.getText();
        Agregar_nota_credito acf;
        acf = new Agregar_nota_credito(new javax.swing.JDialog(), true);
        acf.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tb_nota_credMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_nota_credMouseClicked
        if (JOptionPane.showConfirmDialog(rootPane, "Excluir, Â¿desea continuar?",
                "Items", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) tb_nota_cred.getModel();
            int fila = tb_nota_cred.getSelectedRow();
            if (fila >= 0) {
                model.removeRow(fila);

                if (fila == 0) {

                    txt_monto_credito.setText("0");
                }
                btncalcular.doClick();
            }

        }
    }//GEN-LAST:event_tb_nota_credMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pago_factura_credito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pago_factura_credito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pago_factura_credito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pago_factura_credito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                pago_factura_credito dialog = new pago_factura_credito(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_agreagr_factura;
    private javax.swing.JButton btn_busar;
    private javax.swing.JButton btn_cheques;
    public static javax.swing.JButton btncalcular;
    private javax.swing.JCheckBox chk_cheque;
    private javax.swing.JCheckBox chk_contado;
    private javax.swing.JCheckBox chk_efectivo;
    private javax.swing.JCheckBox chk_plazo;
    public static javax.swing.JTextField id_cliente_cre;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lbl_import_total;
    private javax.swing.JLabel lbl_literal;
    private javax.swing.JLabel lbl_literal_pro;
    public static javax.swing.JLabel lbl_serie_pago;
    private javax.swing.JLabel lbl_total_cheque;
    private javax.swing.JLabel lbl_total_efect;
    private javax.swing.JPanel panel_config;
    public static javax.swing.JTable tb_detalles;
    public static javax.swing.JTable tb_facturas;
    public static javax.swing.JTable tb_nota_cred;
    public static javax.swing.JTextField txt_almacen;
    private javax.swing.JTextField txt_cred_entrada_caja;
    public static javax.swing.JTextField txt_lote_recibos_fact;
    private javax.swing.JLabel txt_monto_credito;
    private javax.swing.JTextField txt_monto_pago;
    public static javax.swing.JTextField txt_monto_total;
    public static javax.swing.JTextField txt_nom_cli_cred;
    public static javax.swing.JTextField txt_nro_fact;
    private javax.swing.JTextField txt_nro_recibo;
    private javax.swing.JTextField txt_periodo_fiscal;
    public static javax.swing.JTextField txt_total_saldo;
    private javax.swing.JLabel txt_venta_cre_saldo;
    // End of variables declaration//GEN-END:variables

    void limpiar() {

        txt_total_saldo.setText("");
        txt_venta_cre_saldo.setText("");
        txt_monto_pago.setText("");

    }

    void cargar_Caja() {

        String nro_recibo = txt_nro_recibo.getText();
        String id_cliente = id_cliente_cre.getText();
        String fact = lbl_serie_pago.getText();
        String valor = txt_cred_entrada_caja.getText();

        txt_nro_docu.setText(nro_recibo);
        txt_des_caja.setText("Recibo de dinero segun Serie NÂ°:" + fact + " /" + " Id cliente:" + id_cliente);
        lbl_total_gs.setText(valor);
        Caja_caja.btn_calcular.doClick();
        //  Caja_caja.btn_confirmar.doClick();

    }

    public void calcularTotal() {

    }

    public String ActivatedYourLife_efect(JTextField CampoTexto, java.awt.event.KeyEvent evt) {
        String Retorno = "";
        //<editor-fold defaultstate="collapsed" desc="ACTIONS">
        //<editor-fold defaultstate="collapsed" desc="CLOSER EYES">  
        int KeyCode = evt.getKeyCode();
        if ( //<editor-fold defaultstate="collapsed" desc="PARAMS">
                (KeyCode >= 48 // 48  = VK_0
                && KeyCode <= 57 // 57  = VK_9                
                )
                || (KeyCode >= 96 // 96  = VK_NUMPAD0
                && KeyCode <= 105// 105 = VK_NUMPAD9
                )
                || KeyCode == 8 // 8   = VK_BACK_SPACE
                || KeyCode == 46 // 46  = PUNTO DECIMAL
                //</editor-fold>                        
                ) {
            //<editor-fold defaultstate="collapsed" desc="ACTIONS">
            //<editor-fold defaultstate="collapsed" desc="SECURE ALPHA">
            //<editor-fold defaultstate="collapsed" desc="IF">
            String DigitedText = CampoTexto.getText().replaceAll("\\s", "");
            if (DigitedText.isEmpty()
                    || KeyCode == 44) {
                // NO HACE NADA.-
            }// FIN IF
            //</editor-fold>
            //<editor-fold defaultstate="collapsed" desc="ELSE">
            else {
                //<editor-fold defaultstate="collapsed" desc="MSK">            
                String Tag = lbl_mone_def.getText().replaceAll("\\s", "").toLowerCase();
                if (!Tag.equals("guaranÃ­es")) {
                    //<editor-fold defaultstate="collapsed" desc="PARA MONEDAS CON NROS ENTEROS Y QUE TAMBIEN TENGA PARTE FRACCIONARIA">
                    /*
                     POR EJEMPLO REAL BRASILERO O DOLAR 
                     QUE SI POSEE APARTE DEL ENTERO, TAMBIEN LA PARTE FRACCIONARIA.-
                     VALGA LA REDUNDANCIA EJEMPLO: 
                     2,000.99 $
                     O
                     5.25 R$
                     RECUERDE MY FRIEND DEPENDE DEL CONOCIMIENTO DEL OBSERVADOR LA INTERPRETACION DE LOS SIGNOS, 
                     UNA INTERPRETACION VALIDA SERIA QUE LA COMA " , " FUNCIONARIA COMO SEPARADOR DE MILES
                     Y EL PUNTO " . " COMO DELIMITADOR DE LA PARTE ENTERA DE LA PARTE FRACCIONARIA.-                
                     */
                    //<editor-fold defaultstate="collapsed" desc="CUENTA CUANTOS PUNTOS DECIMALES INGRESO EL USER">
                    int PointCounter = 0, i = 0;
                    while (i < DigitedText.length()) {
                        Object CharacterByCharacter = DigitedText.charAt(i);
                        if (CharacterByCharacter.toString().equals(".")) {
                            PointCounter = PointCounter + 1;
                            if (PointCounter == 2) {
                                i = i + DigitedText.length();
                            }//FIN IF
                        }//FIN IF                    
                        i++;
                    }// FIN WHILE
                    //</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="CASO INGRESE DOS PUNTOS DE SEGUIDO">
                    if (PointCounter == 2) {
                        String Entera = DigitedText.substring(0, DigitedText.indexOf("."));
                        Entera = Entera.replaceAll("\\s", "");
                        if (Entera.isEmpty() && KeyCode != 46) {
                            CampoTexto.setCaretPosition(Entera.length());
                        }//FIN IF
                        else {
                            if (Entera.isEmpty() && KeyCode == 46) {
                                //<editor-fold defaultstate="collapsed" desc="ACTIONS">
                                String Fraccion = DigitedText.substring(DigitedText.indexOf(".") + 1, DigitedText.length());
                                Fraccion = Fraccion.replace(".", "").replaceAll("\\s", "");
                                String ReIntegrated = "." + Fraccion;
                                CampoTexto.setText(ReIntegrated);
                                int Lenght = ReIntegrated.substring(0, ReIntegrated.indexOf(".")).length();
                                CampoTexto.setCaretPosition(Lenght);
                                //</editor-fold>
                            }//FIN IF
                            else {
                                //<editor-fold defaultstate="collapsed" desc="ACTIONS">
                                String Fraccion = DigitedText.substring(DigitedText.indexOf(".") + 1, DigitedText.length());
                                Entera = MaskaraEnteros(Entera);
                                Fraccion = Fraccion.replace(".", "").replaceAll("\\s", "");
                                if (Fraccion.isEmpty()) {
                                    Fraccion = "00";
                                }//FIN IF
                                if (Fraccion.length() >= 3) {
                                    Fraccion = Fraccion.substring(0, 2);
                                }//FIN IF                                   
                                String ReIntegrated = Entera + ".";
                                CampoTexto.setText(ReIntegrated);
                                CampoTexto.setCaretPosition(ReIntegrated.length());
                                //</editor-fold>
                            }//FIN ELSE
                        }//FIN ELSE
                    }// FIN IF
                    //</editor-fold>
                    //<editor-fold defaultstate="collapsed" desc="INGRESO DE PUNTOS DECIMALES - DOS CASOS">
                    else {
                        //<editor-fold defaultstate="collapsed" desc="CASO 1 - INGRESO PRIMERA VEZ EL PUNTO DECIMAL">
                        if (PointCounter == 1 && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
                            String Entera = DigitedText.substring(0, DigitedText.indexOf("."));
                            String Fraccion = DigitedText.substring(DigitedText.indexOf(".") + 1, DigitedText.length());
                            Entera = MaskaraEnteros(Entera);
                            Fraccion = Fraccion.replace(".", "").replaceAll("\\s", "");
                            if (Fraccion.length() >= 3) {
                                Fraccion = Fraccion.substring(0, 2);
                            }//FIN IF
                            String ReIntegrated = Entera + "." + Fraccion;
                            CampoTexto.setText(ReIntegrated);
                            if (Fraccion.length() == 2) {
                                CampoTexto.setCaretPosition(Entera.length());
                            }//FIN IF
                            else {
                                if (Fraccion.length() != 2) {
                                    CampoTexto.setCaretPosition(ReIntegrated.length());
                                }//FIN IF                            
                            }//FIN ELSE
                        }//FIN IF
                        //</editor-fold>                    
                        //<editor-fold defaultstate="collapsed" desc="CASO 2">
                        else {
                            //<editor-fold defaultstate="collapsed" desc="PRESIONO BACK_SPACE Y YA HAY UN PUNTO DECIMAL">
                            if (PointCounter == 1
                                    && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                                if (DigitedText.contains(".")) {
                                    String Entera = DigitedText.substring(0, DigitedText.indexOf("."));
                                    Entera = MaskaraEnteros(Entera);
                                    String Fraccion = DigitedText.substring(DigitedText.indexOf(".") + 1, DigitedText.length());
                                    if (Fraccion.length() >= 3) {
                                        Fraccion = Fraccion.substring(0, 2);
                                    }//FIN IF
                                    String ReIntegrated = Entera + "." + Fraccion;
                                    CampoTexto.setText(ReIntegrated);
                                    if (Fraccion.length() == 2) {
                                        CampoTexto.setCaretPosition(Entera.length());
                                    }//FIN IF
                                    else {
                                        if (Fraccion.length() != 2) {
                                            CampoTexto.setCaretPosition(ReIntegrated.length());
                                        }//FIN IF                            
                                    }//FIN ELSE                                
                                }//FIN IF                                    
                            }// FIN IF
                            //</editor-fold>
                            //<editor-fold defaultstate="collapsed" desc="CASO 2 - INGRESO SOLO NRO ENTERO NADA DE PUNTO DECIMAL AUN">
                            if (PointCounter == 0) {
                                String Entera = DigitedText.substring(0, DigitedText.length());
                                Entera = MaskaraEnteros(Entera);
                                String ReIntegrated = Entera + ".00";
                                CampoTexto.setText(ReIntegrated);
                                CampoTexto.setCaretPosition(Entera.length());
                            }//FIN IF                    
                            //</editor-fold>                        
                        }// FIN ELSE
                        //</editor-fold>
                        //</editor-fold>
                    }// FIN ELSE
                    //</editor-fold>
                }//FIN IF
                else {
                    //<editor-fold defaultstate="collapsed" desc="PARA MONEDAS QUE SOLO POSEA NROS ENTEROS">
                    /*
                     POR EJEMPLO NUESTRO ESTIMADO GUARANI SOLO POSEE PARTE ENTERA NO TIENE FRACCIONES.- 
                     VALGA LA REDUNDANCIA EJEMPLO: 
                     10,000 Gs
                     O
                     1,500 Gs
                     RECUERDE MY FRIEND DEPENDE DEL CONOCIMIENTO DEL OBSERVADOR LA INTERPRETACION DE LOS SIGNOS, 
                     UNA INTERPRETACION VALIDA SERIA QUE LA COMA " , " FUNCIONARIA COMO SEPARADOR DE MILES
                     Y EL PUNTO " . " COMO DELIMITADOR DE LA PARTE ENTERA DE LA PARTE FRACCIONARIA.-
                     */
                    this.txt_monto_pago.setText(
                            MaskaraEnteros(DigitedText)
                    );
                    //</editor-fold>
                }//FIN ELSE        
                //</editor-fold>    
            }// FIN ELSE
            //</editor-fold>    
            //</editor-fold>
            //</editor-fold>
        }//FIN IF
        else {
            //<editor-fold defaultstate="collapsed" desc="OBTIENE PARTE ENTERA Y FRACCIONES">
            String Texting = txt_monto_pago.getText();
            if (Texting.contains(".")) {
                String Entero = Texting.substring(0, Texting.indexOf("."));
                Entero = MaskaraEnteros(Entero);
                String Fraccion = Texting.substring(Texting.indexOf(".") + 1, Texting.length());
                String Integrated = Entero + "." + Fraccion.replaceAll("\\D", "");
                this.txt_monto_pago.setText(Integrated);
            }//FIN IF            
            //</editor-fold>            
            //<editor-fold defaultstate="collapsed" desc="ALARMA">

            //</editor-fold>            
        }//FIN ELSE
        //</editor-fold>        
        //</editor-fold>
        return Retorno;
    }// FIN 1Âº METODO

    public String MaskaraEnteros(String ValorGuaranies) {
        //<editor-fold defaultstate="collapsed" desc="IF">        
        ValorGuaranies = ValorGuaranies.replaceAll("\\s", "").replaceAll("\\D", "");
        if (ValorGuaranies.contains(".")) {
            BigDecimal Rounder = new BigDecimal(ValorGuaranies);
            Rounder = Rounder.setScale(0, BigDecimal.ROUND_HALF_UP);
            ValorGuaranies = Rounder.toString();
            if (ValorGuaranies.contains(".")) {
                ValorGuaranies = ValorGuaranies.substring(0, ValorGuaranies.indexOf("."));
            }
        }// FIN IF
        //</editor-fold>        
        DecimalFormat Formato = new DecimalFormat("###,###.##");
        long NumeroIntacto = 0L;
        String NroFormatado = "";
        String ValorViejo = ValorGuaranies;
        String Puro = ValorViejo.replace(",", "");
        NumeroIntacto = Long.parseLong(Puro);
        NroFormatado = Formato.format(NumeroIntacto);
        String ReadyToExhibit = NroFormatado;
        ReadyToExhibit = ReadyToExhibit.replace(".", ",");
        return ReadyToExhibit;
    }// FIN METODO

    void actEstadoDevo(String cod, String monto) {
        if (txt_almacen.getText().equals("0000001")) {
            try {

                String sql = "UPDATE devolucion_facturacion_fiscal SET saldo_cred = '" + monto
                        + "' WHERE num_bol = '" + cod + "'";
                try {
                    Connection cn = conectar.getInstance().getConnection();

                    PreparedStatement pst = cn.prepareStatement(sql);
                    pst.executeUpdate();
                    conectar.getInstance().closeConnection(cn);

                    //  JOptionPane.showMessageDialog(null, "Actualizado");
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e);
                }

            } catch (HeadlessException e) {
            }
        }

        //2
        if (txt_almacen.getText().equals("0000002")) {
            try {

                String sql = "UPDATE devolucion_facturacion_surc_2 SET saldo_cred = '" + monto
                        + "' WHERE num_bol = '" + cod + "'";
                try {
                    Connection cn = conectar.getInstance().getConnection();

                    PreparedStatement pst = cn.prepareStatement(sql);
                    pst.executeUpdate();
                    conectar.getInstance().closeConnection(cn);

                    //  JOptionPane.showMessageDialog(null, "Actualizado");
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e);
                }

            } catch (HeadlessException e) {
            }
        }

    }

    void actEstadoVentas(String cod, String monto) {
        if (txt_almacen.getText().equals("0000001")) {
            try {

                String sql = "UPDATE ventas_facturacion SET saldo_cred = '" + monto
                        + "' WHERE num_bol = '" + cod + "'";
                try {
                    Connection cn = conectar.getInstance().getConnection();

                    PreparedStatement pst = cn.prepareStatement(sql);
                    pst.executeUpdate();
                    conectar.getInstance().closeConnection(cn);

                    //  JOptionPane.showMessageDialog(null, "Actualizado");
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e);
                }

            } catch (HeadlessException e) {
            }
        }

        //2
        if (txt_almacen.getText().equals("0000002")) {
            try {

                String sql = "UPDATE ventas_facturacion_surc_2 SET saldo_cred = '" + monto
                        + "' WHERE num_bol = '" + cod + "'";
                try {
                    Connection cn = conectar.getInstance().getConnection();

                    PreparedStatement pst = cn.prepareStatement(sql);
                    pst.executeUpdate();
                    conectar.getInstance().closeConnection(cn);

                    //  JOptionPane.showMessageDialog(null, "Actualizado");
                } catch (SQLException | HeadlessException e) {
                    JOptionPane.showMessageDialog(null, e);
                }

            } catch (HeadlessException e) {
            }
        }

    }

    void actpagosStatus(String saldo, String nv) {
        if (saldo.equals("0")) {

            if (txt_almacen.getText().equals("0000001")) {
                try {
                    String es = ("CANCELADA");
                    String Status = ("CONFIRMADA");
                    String sql = "UPDATE ventas_facturacion SET estado_fact = '" + es
                            + "' WHERE num_bol = '" + nv + "'";
                    String sql_ventas = "UPDATE ventas SET estado_ventas = '" + Status
                            + "' WHERE num_bol = '" + nv + "'";
                    try {
                        Connection cn = conectar.getInstance().getConnection();

                        PreparedStatement pst = cn.prepareStatement(sql);
                        PreparedStatement pst2 = cn.prepareStatement(sql_ventas);
                        pst.executeUpdate();
                        pst2.executeUpdate();
                        conectar.getInstance().closeConnection(cn);

                        //  JOptionPane.showMessageDialog(null, "Actualizado");
                    } catch (SQLException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, e);
                    }

                } catch (HeadlessException e) {
                }
            }

            //2
            if (txt_almacen.getText().equals("0000002")) {
                try {
                    String es = ("CANCELADA");
                    String Status = ("CONFIRMADA");
                    String sql = "UPDATE ventas_facturacion_surc_2 SET estado_fact = '" + es
                            + "' WHERE num_bol = '" + nv + "'";
                    String sql_ventas = "UPDATE ventas_2 SET estado_ventas = '" + Status
                            + "' WHERE num_bol = '" + nv + "'";
                    try {
                        Connection cn = conectar.getInstance().getConnection();

                        PreparedStatement pst = cn.prepareStatement(sql);
                        PreparedStatement pst2 = cn.prepareStatement(sql_ventas);
                        pst.executeUpdate();
                        pst2.executeUpdate();
                        conectar.getInstance().closeConnection(cn);

                        //  JOptionPane.showMessageDialog(null, "Actualizado");
                    } catch (SQLException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, e);
                    }

                } catch (HeadlessException e) {
                }
            }

            ///////////no configurado
//16
        }
    }

    void pago_credito() {

        String InsertarSQL = "INSERT INTO pago_credito(nro_pago,nro_venta,id_cli,nom_cli,concept_pag_cuenta,concept_canc,paga_efec,paga_cheque,total_efect,total_cheq,total_importe,surcusal,saldo_pendiente,monto_fact,nro_fact,literal,data_control,data_vista,id_cuenta,user_pago,periodo_fiscal,nro_recibo,lote_fact) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

        String serie = lbl_serie_pago.getText();
        String nro_venta = ("0");
        String id_cli = id_cliente_cre.getText();
        String nom_cli = txt_nom_cli_cred.getText();
        String concept_pag_cuenta = chk_pago;
        String concept_canc = chk_can;
        String paga_efec = chk_efec;
        String paga_cheque = chk_cheq;
        String total_efect = lbl_total_efect.getText();
        String total_cheq = lbl_total_cheque.getText();
        String total_importe = lbl_import_total.getText();
        String surcusal = txt_almacen.getText();
        String saldo_pendiente = txt_venta_cre_saldo.getText();
        String monto_fact = txt_monto_total.getText();
        String nro_fact = txt_nro_fact.getText();
        String literal = lbl_literal.getText();
        String data_control = lbl_fecha_hoy.getText();
        String data_vista = lbl_fecha_principal.getText();
        String id_cuenta = Caja_caja.txt_nro_his.getText();
        String user_pago = lbl_usu_nom.getText();
        String periodo = txt_periodo_fiscal.getText();
        String nro_recibo = txt_nro_recibo.getText();
        String total_facturas = txt_total_saldo.getText();
        String lote = txt_lote_recibos_fact.getText();
        try {
            Connection cn = conectar.getInstance().getConnection();

            PreparedStatement pst = cn.prepareStatement(InsertarSQL);
            pst.setString(1, serie);
            pst.setString(2, nro_venta);
            pst.setString(3, id_cli);
            pst.setString(4, nom_cli);
            pst.setString(5, concept_pag_cuenta);
            pst.setString(6, concept_canc);
            pst.setString(7, paga_efec);
            pst.setString(8, paga_cheque);
            pst.setString(9, total_efect);
            pst.setString(10, total_cheq);
            pst.setString(11, total_importe);
            pst.setString(12, surcusal);
            pst.setString(13, saldo_pendiente);
            pst.setString(14, monto_fact);
            pst.setString(15, nro_fact);
            pst.setString(16, literal);
            pst.setString(17, data_control);
            pst.setString(18, data_vista);
            pst.setString(19, id_cuenta);
            pst.setString(20, user_pago);
            pst.setString(21, periodo);
            pst.setString(22, nro_recibo);
            pst.setString(23, lote);

            int n = pst.executeUpdate();
            conectar.getInstance().closeConnection(cn);

            if (n > 0) {

                detalle_pago_credito();
                detalle_pago_facturas();
                detalle_nota_credito();

                String capcod = "", capcan = "", vn = "";
                for (int i = 0; i < pago_factura_credito.tb_facturas.getRowCount(); i++) {
                    //  capcod = pago_factura_credito.tb_facturas.getValueAt(i, 0).toString();
                    capcan = pago_factura_credito.tb_facturas.getValueAt(i, 3).toString();
                    vn = pago_factura_credito.tb_facturas.getValueAt(i, 4).toString();
                    actEstadoVentas(vn, capcan);
                    actpagosStatus(capcan, vn);
                }
                
                  String cod = "", scred = "";
                    for (int i = 0; i < pago_factura_credito.tb_nota_cred.getRowCount(); i++) {
                        cod = pago_factura_credito.tb_nota_cred.getValueAt(i, 0).toString();
                        scred = pago_factura_credito.tb_nota_cred.getValueAt(i, 2).toString();

                        actEstadoDevo(cod, scred);
                    }

                cargar_Caja();
                JOptionPane.showMessageDialog(null, "OperaciÃ³n exitosa!");
                imprimir();
            }

        } catch (SQLException ex) {
            Logger.getLogger(Caja_caja.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al guardar recibo! " + ex);
        }
    }

    void detalle_pago_credito() {
        for (int i = 0; i < tb_detalles.getRowCount(); i++) {
            String InsertarSQL = "INSERT INTO pago_credito_detalle (nro_pago,nom_banco,nro_cheq,fecha,importe,fecha_entra,fact_sucursal,di_banco) VALUES (?,?,?,?,?,?,?,?)";
            String nro = lbl_serie_pago.getText();
            String banco = tb_detalles.getValueAt(i, 0).toString();
            String nro_ch = tb_detalles.getValueAt(i, 1).toString();
            String fecha = tb_detalles.getValueAt(i, 2).toString();
            String importe = tb_detalles.getValueAt(i, 3).toString();
            String fecha_data = lbl_fecha_hoy.getText();
            String sucursal = txt_almacen.getText();
            String id_banco = tb_detalles.getValueAt(i, 4).toString();

            try {
                Connection cn = conectar.getInstance().getConnection();

                PreparedStatement pst = cn.prepareStatement(InsertarSQL);
                pst.setString(1, nro);
                pst.setString(2, banco);
                pst.setString(3, nro_ch);
                pst.setString(4, fecha);
                pst.setString(5, importe);
                pst.setString(6, fecha_data);
                pst.setString(7, sucursal);
                pst.setString(8, id_banco);

                pst.executeUpdate();
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(pago_factura_credito.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void detalle_pago_facturas() {
        for (int i = 0; i < tb_facturas.getRowCount(); i++) {
            String InsertarSQL = "INSERT INTO pago_credito_factura (nro_recibo,nro_factura,fecha_vista,importe,saldo,data,nro_venta,fact_sucursal,lote_fact) VALUES (?,?,?,?,?,?,?,?,?)";
            String nro = lbl_serie_pago.getText();
            String factura = tb_facturas.getValueAt(i, 0).toString();
            String fecha_vista = tb_facturas.getValueAt(i, 1).toString();
            String importe = tb_facturas.getValueAt(i, 2).toString();
            String saldo = tb_facturas.getValueAt(i, 3).toString();
            String fecha_data = lbl_fecha_hoy.getText();
            String venta = tb_facturas.getValueAt(i, 4).toString();
            String lote = tb_facturas.getValueAt(i, 5).toString();
            String sucursal = Caja_caja.txt_alma_caja.getText();

            try {
                Connection cn = conectar.getInstance().getConnection();

                PreparedStatement pst = cn.prepareStatement(InsertarSQL);
                pst.setString(1, nro);
                pst.setString(2, factura);
                pst.setString(3, fecha_vista);
                pst.setString(4, importe);
                pst.setString(5, saldo);
                pst.setString(6, fecha_data);
                pst.setString(7, venta);
                pst.setString(8, sucursal);
                pst.setString(9, lote);

                pst.executeUpdate();
                conectar.getInstance().closeConnection(cn);

            } catch (SQLException ex) {
                Logger.getLogger(pago_factura_credito.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void detalle_nota_credito() {
        for (int i = 0; i < tb_nota_cred.getRowCount(); i++) {
            String InsertarSQL = "INSERT INTO pago_credito_devo (nro_nota_pago,nro_nota_dev,monto_importe,monto_saldo,fecha_data,fecha_vista,ope_sucursal) VALUES (?,?,?,?,?,?,?)";
            String nro = lbl_serie_pago.getText();
            String factura = tb_nota_cred.getValueAt(i, 0).toString();
            String importe = tb_nota_cred.getValueAt(i, 1).toString();
            String saldo = tb_nota_cred.getValueAt(i, 2).toString();
            String fecha_data = lbl_fecha_hoy.getText();
            String fecha_vista = Principal.lbl_fecha_principal.getText();
            String sucursal = Caja_caja.txt_alma_caja.getText();

            try {
                Connection cn = conectar.getInstance().getConnection();

                PreparedStatement pst = cn.prepareStatement(InsertarSQL);
                pst.setString(1, nro);
                pst.setString(2, factura);
                pst.setString(3, importe);
                pst.setString(4, saldo);
                pst.setString(5, fecha_data);
                pst.setString(6, fecha_vista);
                pst.setString(7, sucursal);

                int n = pst.executeUpdate();
                conectar.getInstance().closeConnection(cn);

                if (n > 0) {

                  
                }

            } catch (SQLException ex) {
                Logger.getLogger(pago_factura_credito.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void calcularCheque() {

        ///
        String imp = "0", subtotal = "0", total = "0";

        for (int i = 0; i < tb_detalles.getRowCount(); i++) {
            BigDecimal PulidoPrec = ingreso.TransformReales(tb_detalles.getValueAt(i, 3).toString().replaceAll("\\s", ""));
            imp = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(PulidoPrec.toString());
            subtotal = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(ingreso.TransformReales(subtotal).add(ingreso.TransformReales(imp)).toString());
            lbl_total_cheque.setText(subtotal);
        }
    }

    public void calcularfacturas() {

        ///
        String imp = "0", subtotal = "0", total = "0";

        for (int i = 0; i < tb_facturas.getRowCount(); i++) {
            BigDecimal PulidoPrec = ingreso.TransformReales(tb_facturas.getValueAt(i, 2).toString().replaceAll("\\s", ""));
            imp = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(PulidoPrec.toString());
            subtotal = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(ingreso.TransformReales(subtotal).add(ingreso.TransformReales(imp)).toString());
            txt_total_saldo.setText(subtotal);
        }
    }

    public void calcularCreditos() {

        ///
        String imp = "0", subtotal = "0", total = "0";

        for (int i = 0; i < tb_nota_cred.getRowCount(); i++) {
            BigDecimal PulidoPrec = ingreso.TransformReales(tb_nota_cred.getValueAt(i, 1).toString().replaceAll("\\s", ""));
            imp = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(PulidoPrec.toString());
            subtotal = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(ingreso.TransformReales(subtotal).add(ingreso.TransformReales(imp)).toString());
            txt_monto_credito.setText(subtotal);
        }
    }

    public void calcular_total_tipo() {

        String totalpor = "0", inter = "0", totalRec = "0";
        BigDecimal Precio_efec = ingreso.TransformReales(lbl_total_efect.getText());
        BigDecimal precio_cheque = ingreso.TransformReales(lbl_total_cheque.getText());
        totalpor = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(precio_cheque.add(Precio_efec).toString());
        inter = totalpor;
        ///
        BigDecimal credEfect = ingreso.TransformReales(inter);
        BigDecimal notaCre = ingreso.TransformReales(txt_monto_credito.getText());
        totalRec = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(credEfect.add(notaCre).toString());

        lbl_import_total.setText(totalRec);

    }

    public void calcular_entrada_caja() {

        String totalpor = "0";
        BigDecimal Precio_efec = ingreso.TransformReales(lbl_import_total.getText());
        BigDecimal precio_cheque = ingreso.TransformReales(txt_monto_credito.getText());
        totalpor = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(Precio_efec.subtract(precio_cheque).toString());
        txt_cred_entrada_caja.setText(totalpor);

    }

    public void calcular_diferencia() {

        String totalpor = "0";
        BigDecimal total = ingreso.TransformReales(lbl_import_total.getText());
        BigDecimal pendient = ingreso.TransformReales(txt_total_saldo.getText());
        totalpor = ingreso.MaskareaRealesDado_String_ExclusiveMonedas(pendient.subtract(total).toString());
        txt_venta_cre_saldo.setText(totalpor);

    }

    void genera() {

        lbl_serie_pago.setText(txt_nro_recibo.getText() + "1" + txt_almacen.getText() + "0" + txt_periodo_fiscal.getText() + "-" + txt_lote_recibos_fact.getText());
    }
    private String chk_pago;
    private String chk_can;
    private String chk_efec;
    private String chk_cheq;

    void literal() {

        String emi = lbl_import_total.getText();
        String emi1 = emi.replaceAll(",", "");
        lbl_literal_pro.setText(emi1);
        try {
            Clase_Literal NumLetra = new Clase_Literal();
            String numero = lbl_literal_pro.getText();
            lbl_literal.setText(NumLetra.Convertir(numero, true));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void imprimir() {
        if (JOptionPane.showConfirmDialog(rootPane, "Imprimir comprobante, Â¿desea continuar?",
                "Imprimir", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (txt_almacen.getText().equals("0000001")) {

                PrintService[] printService = PrintServiceLookup.lookupPrintServices(null, null);
                if (printService.length > 0)//si existen impresoras
                {
                    //se elige la impresora
                    PrintService impresora = (PrintService) JOptionPane.showInputDialog(null, "Seleccionar  impresora:",
                            "Imprimir ", JOptionPane.QUESTION_MESSAGE, null, printService, printService[0]);
                    if (impresora != null) //Si se selecciono una impresora
                    {

                        try {

                            String nro = lbl_serie_pago.getText();
                            Connection cn = conectar.getInstance().getConnection();

                            URL in = this.getClass().getResource("/Caja_2/Pago_Plazos/Recibo_principal_factura.jasper");
                            Map parametro = new HashMap();
                            parametro.clear();
                            parametro.put("serienro", nro);
                            parametro.put("SUBREPORT_DIR", "Caja_2/Pago_Plazos/");
                            JasperReport reporte = (JasperReport) JRLoader.loadObject(in);
                            JasperPrint print = JasperFillManager.fillReport(reporte, parametro, cn);
                            JRPrintServiceExporter jrprintServiceExporter = new JRPrintServiceExporter();
                            jrprintServiceExporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                            jrprintServiceExporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE, impresora);
                            // jrprintServiceExporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.TRUE);
                            jrprintServiceExporter.exportReport();
                            conectar.getInstance().closeConnection(cn);

                        } catch (JRException ex) {

                        } catch (SQLException ex) {
                            Logger.getLogger(pago_factura_credito.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

            if (txt_almacen.getText().equals("0000002")) {

                PrintService[] printService = PrintServiceLookup.lookupPrintServices(null, null);
                if (printService.length > 0)//si existen impresoras
                {
                    //se elige la impresora
                    PrintService impresora = (PrintService) JOptionPane.showInputDialog(null, "Seleccionar  impresora:",
                            "Imprimir ", JOptionPane.QUESTION_MESSAGE, null, printService, printService[0]);
                    if (impresora != null) //Si se selecciono una impresora
                    {

                        try {

                            String nro = lbl_serie_pago.getText();
                            Connection cn = conectar.getInstance().getConnection();

                            URL in = this.getClass().getResource("/Caja_2/Pago_Plazos/recibo_principal.jasper");
                            Map parametro = new HashMap();
                            parametro.clear();
                            parametro.put("serienro", nro);
                            parametro.put("SUBREPORT_DIR", "Caja_2/Pago_Plazos/");
                            JasperReport reporte = (JasperReport) JRLoader.loadObject(in);
                            JasperPrint print = JasperFillManager.fillReport(reporte, parametro, cn);
                            JRPrintServiceExporter jrprintServiceExporter = new JRPrintServiceExporter();
                            jrprintServiceExporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                            jrprintServiceExporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE, impresora);
                            // jrprintServiceExporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.TRUE);
                            jrprintServiceExporter.exportReport();
                            conectar.getInstance().closeConnection(cn);

                        } catch (JRException ex) {

                        } catch (SQLException ex) {
                            Logger.getLogger(pago_factura_credito.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }

    }

}
