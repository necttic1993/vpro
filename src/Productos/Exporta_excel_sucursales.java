/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Productos;

import Conexion_DB.conectar;
import Loggin_Principal.Principal;
import static Loggin_Principal.Principal.txt_fecha_backup;
import Loggin_Principal.Seleccion_surcu_excell;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author user
 */
public class Exporta_excel_sucursales extends javax.swing.JDialog {

    /**
     * Creates new form Departamentos
     */
    public Exporta_excel_sucursales(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cargarUsu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        lbl_almacen_excell = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ch_impresion = new javax.swing.JCheckBox();
        txt_impresion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos_5/sobresalir.png"))); // NOI18N
        jButton2.setText("Stock de productos ");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 190, 60));

        lbl_almacen_excell.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_almacen_excell.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Caja_2/iconos/dpto.png"))); // NOI18N
        lbl_almacen_excell.setText("0000000");
        lbl_almacen_excell.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_almacen_excell.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lbl_almacen_excell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_almacen_excellMouseClicked(evt);
            }
        });
        jPanel1.add(lbl_almacen_excell, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 110, 60));

        jPanel5.setBackground(new java.awt.Color(0, 102, 51));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ch_impresion.setBackground(new java.awt.Color(0, 102, 51));
        ch_impresion.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ch_impresion.setForeground(new java.awt.Color(255, 255, 255));
        ch_impresion.setText("IMPRESIÓN REMOTA");
        ch_impresion.setFocusPainted(false);
        ch_impresion.setOpaque(false);
        jPanel5.add(ch_impresion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 150, 40));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 190, 40));

        txt_impresion.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        txt_impresion.setForeground(new java.awt.Color(153, 0, 0));
        txt_impresion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(txt_impresion, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 210, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 219));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (lbl_almacen_excell.getText().equals("TODOS")) {
            JOptionPane.showMessageDialog(this, "Seleccione un Surcusal/Almacen válido");
        } else {
             txt_impresion.setText("Generando Informe...Espere...");  

            if (lbl_almacen_excell.getText().equals("0000001")) {
                try {
                    reporteProd_1();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000002")) {
                try {
                    reporteProd_2();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000003")) {
                try {
                    reporteProd_3();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000004")) {
                try {
                    reporteProd_4();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000005")) {
                try {
                    reporteProd_5();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000006")) {
                try {
                    reporteProd_6();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            if (lbl_almacen_excell.getText().equals("0000007")) {
                try {
                    reporteProd_7();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000008")) {
                try {
                    reporteProd_8();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000009")) {
                try {
                    reporteProd_9();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000010")) {
                try {
                    reporteProd_10();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000011")) {
                try {
                    reporteProd_11();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000012")) {
                try {
                    reporteProd_12();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (lbl_almacen_excell.getText().equals("0000013")) {
                try {
                    reporteProd_13();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000014")) {
                try {
                    reporteProd_14();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000015")) {
                try {
                    reporteProd_15();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000016")) {
                try {
                    reporteProd_16();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000017")) {
                try {
                    reporteProd_17();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000018")) {
                try {
                    reporteProd_18();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000019")) {
                try {
                    reporteProd_19();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000020")) {
                try {
                    reporteProd_20();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000021")) {
                try {
                    reporteProd_21();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000022")) {
                try {
                    reporteProd_22();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000023")) {
                try {
                    reporteProd_23();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000024")) {
                try {
                    reporteProd_24();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000025")) {
                try {
                    reporteProd_25();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000026")) {
                try {
                    reporteProd_26();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000027")) {
                try {
                    reporteProd_27();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000028")) {
                try {
                    reporteProd_28();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000029")) {
                try {
                    reporteProd_29();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (lbl_almacen_excell.getText().equals("0000030")) {
                try {
                    reporteProd_30();
                } catch (IOException ex) {
                    Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void lbl_almacen_excellMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_almacen_excellMouseClicked
        if (Principal.lbl_usu_almacen.getText().equals("TODOS")) {

            Seleccion_surcu_excell sl;
            sl = new Seleccion_surcu_excell(new javax.swing.JDialog(), true);
            sl.setVisible(true);

        }
    }//GEN-LAST:event_lbl_almacen_excellMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Exporta_excel_sucursales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Exporta_excel_sucursales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Exporta_excel_sucursales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Exporta_excel_sucursales.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Exporta_excel_sucursales dialog = new Exporta_excel_sucursales(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JCheckBox ch_impresion;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    public static javax.swing.JLabel lbl_almacen_excell;
    public static javax.swing.JLabel txt_impresion;
    // End of variables declaration//GEN-END:variables

    /////precio a
    public static void reporteProd_1() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_cant,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_cant > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    //00000002
    public static void reporteProd_2() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_2,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_2 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_3() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_3,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_3 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_4() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_4,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_4 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                try (FileOutputStream fileOut = new FileOutputStream("\\tsclient\\c\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_5() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_5,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_5 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_6() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_6,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_6 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_7() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_7,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_7 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_8() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_8,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_8 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_9() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_9,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_9 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_10() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_10,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_10 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_11() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_11,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_11 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_12() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_12,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_12 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_13() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_13,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_13 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_14() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_14,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_14 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_15() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_15,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_15 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
               txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_16() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_16,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_16 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_17() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_17,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_17 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_18() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_18,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_18 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_19() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_19,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_19 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_20() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_20,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_20 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_21() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_21,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_21 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_22() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_22,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_22 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_23() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_23,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_23 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_24() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_24,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_24 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_25() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_25,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_25 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_26() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_26,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_26 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_27() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_27,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_27 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_28() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_28,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_28 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
              txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_29() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_29,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_29 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                 
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void reporteProd_30() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio Venta"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_stock_30,pro_pre_a FROM tienda_productos where pro_stock='A' AND pro_stock_30 > 0");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            sheet.setZoom(120);

            if (ch_impresion.isSelected()) {
                  txt_impresion.setText("Generando Informe...Espere...");  
                try (FileOutputStream fileOut = new FileOutputStream("\\\\tsclient\\C\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                txt_impresion.setText("");  
                conectar.getInstance().closeConnection(cn);
            } else {

                try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Stock " + txt_fecha_backup.getText() + ".xlsx")) {
                    book.write(fileOut);
                }
                JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
                conectar.getInstance().closeConnection(cn);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    ///precio ab
    public static void reporteProdAB() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio A", "Precio B"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_cant,pro_pre_a,pro_pre_b FROM tienda_productos where pro_stock='A'");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);
            sheet.autoSizeColumn(6);

            sheet.setZoom(120);

            try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Precio_AB " + txt_fecha_backup.getText() + ".xlsx")) {
                book.write(fileOut);
            }
            JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
            conectar.getInstance().closeConnection(cn);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    //precio ac
    public static void reporteProdAC() throws IOException {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("Productos");

        try {

            CellStyle tituloEstilo = book.createCellStyle();
            tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
            tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 12);
            tituloEstilo.setFont(fuenteTitulo);

            Row filaTitulo = sheet.createRow(1);
            Cell celdaTitulo = filaTitulo.createCell(1);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Reporte de Productos");

            sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"Código", "Código de Barras", "Nombre", "Descripción", "Cantidad", "Precio A", "Precio C",};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);

            Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(4);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

            PreparedStatement ps;
            ResultSet rs;

            int numFilaDatos = 6;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            Connection cn = conectar.getInstance().getConnection();

            ps = cn.prepareStatement("SELECT pro_cod, pro_cod_barra, pro_des, pro_des_espec,pro_cant,pro_pre_a,pro_pre_atacado FROM tienda_productos where pro_stock='A'");
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);

                    if (a == 2 || a == 3) {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    } else {
                        CeldaDatos.setCellValue(rs.getString(a + 1));
                    }
                }

                /* Cell celdaImporte = filaDatos.createCell(4);
                 celdaImporte.setCellStyle(datosEstilo);
                 celdaImporte.setCellFormula(String.format("C%d+D%d", numFilaDatos + 1, numFilaDatos + 1));*/
                numFilaDatos++;

            }

            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);
            sheet.autoSizeColumn(6);

            sheet.setZoom(120);

            try (FileOutputStream fileOut = new FileOutputStream("C:\\Informes\\Productos_Precio_AC" + txt_fecha_backup.getText() + ".xlsx")) {
                book.write(fileOut);
            }
            JOptionPane.showMessageDialog(null, "Datos guardados en C:Informes");
            conectar.getInstance().closeConnection(cn);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(Productos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    void cargarUsu() {

        String user = Principal.lbl_id_user.getText();
        String mostrar = "select * from usuarios where usu_cod='" + user + "' ";

        try {
            Connection cn = conectar.getInstance().getConnection();

            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(mostrar);
            while (rs.next()) {

                lbl_almacen_excell.setText(rs.getString(6));

            }
            conectar.getInstance().closeConnection(cn);

        } catch (SQLException ex) {
            Logger.getLogger(Exporta_excel_sucursales.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

}
